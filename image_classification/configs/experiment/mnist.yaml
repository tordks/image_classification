# @package _global_

experiment_name: mnist
experiment_description: baseline MNIST example

num_classes: &num_classes 10
# NOTE: this entry is assumed to be present
metric_to_optimize: &metric_to_optimize "val_f1"

module:
  network:
    _target_: image_classification.network.MNISTNet
  loss:
    _target_: image_classification.losses.FocalLoss
    gamma: 2
    reduction: "mean"
  optimizer:
    _target_: torch.optim.Adam
    lr: 0.01
  lr_scheduler:
    scheduler:
      _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
    monitor: "val_loss"
  training_metrics:
    train_f1:
      _target_: torchmetrics.F1
      num_classes: *num_classes
  validation_metrics:
    val_f1:
      _target_: torchmetrics.F1
      num_classes: *num_classes
    val_cm:
      _target_: image_classification.metrics.MetricsWrapper
      log: false
      metric:
        _target_: torchmetrics.ConfusionMatrix
        num_classes: *num_classes
        normalize: "true"
  monitor: "val_loss"
  hp_metric: *metric_to_optimize

  transforms:
    - _target_: image_classification.transforms.Transform
      identifier: argmax
      stage: training_step
      every_n: 1500
      targets: "prediction"
      transform:
        _target_: torch.argmax
        _partial_: true
        dim: 1

  visualization:
    - _target_: image_classification.visualization.Subplots
      identifier: "Train images"
      stage: training_step
      every_n: 1500
      batch_idx: 0
      title: "Feature l:{label} p:{prediction_argmax}"
      nrows: 1
      ncols: 1
      subplots_kwargs:
        figsize: [8, 8]

      plotters:
        - _target_: image_classification.visualization.Plotter
          plotter:
            _target_: matplotlib.pyplot.imshow
            _partial_: true
          targets: { feature: 0 }
          tensor_idx: 0

    - _target_: image_classification.visualization.Subplots
      identifier: "confusion matrix"
      stage: on_validation_epoch_end
      every_n: 1
      nrows: 1
      ncols: 1
      subplots_kwargs:
        figsize: [8, 8]
      plotters:
        - _target_: image_classification.visualization.Plotter
          plotter:
            _target_: image_classification.visualization.ConfusionMatrixPlotter
          targets: { val_cm: confusion_matrix }

data:
  _target_: image_classification.data.mnist.MNISTDataModule
  data_dir: ${data_dir}
  transform:
    - _target_: torchvision.transforms.ToTensor
    - _target_: torchvision.transforms.Normalize
      mean: [0.1307]
      std: [0.3081]
  batch_size: 32
  num_workers: 20
  download: true
